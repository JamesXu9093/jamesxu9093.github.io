<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[DataStructuresAndAlgorithmsInPython读书笔记]]></title>
      <url>https://jamesxu9093.github.io/2016/12/09/DataStructuresAndAlgorithmsInPython/</url>
      <content type="html"><![CDATA[<p>DataStructuresAndAlgorithmsInPython是2013年出的一本python数据结构与算法的书，全书共15章，篇幅不短，<br>有750来页，豆瓣读书上 <a href="https://book.douban.com/review/6854650/" target="_blank" rel="external">https://book.douban.com/review/6854650/</a> 这篇文章总结的相当好！！！</p>
<p><img src="/blog-img/1209-2.png" alt=""></p>
<a id="more"></a>
<p><strong>Ch1 Python 基础知识</strong><br>这部分对Python的基本语法做了一个简单的描述，主要目的是让本书的读者在一个相同的起跑线上，方便后面的内容展开。</p>
<p><strong>Ch2 面向对象编程</strong><br>首先谈到了面向对象的设计模式，然后以一个例子讲解了Python中如何定义一个类，以及类与类之间的继承关系。最后介绍了Python中类内的变量管理。</p>
<p><strong>Ch3 算法分析基础</strong><br>这部分几乎是算法书必备的内容。介绍如何分析算法的复杂度。</p>
<p><strong>Ch4 递归</strong><br>在开始讲数据结构之前，作者先介绍了一下递归的思想，个人感觉这个章节的安排稍微有些唐突，不过，也算是为后面做铺垫吧。作者对于递归的分类很有启发意义。</p>
<p><strong>Ch5 基于Array的序列</strong><br>忘掉Python下常用的list等等数据结构吧，作者先从最最基础的ctypes下的array结构开始构造类似于list的动态序列数据类型。这将为大家理解list类型奠定良好基础。C语言基础很好的话理解起来会很快。</p>
<p><strong>Ch6 栈、队列与双向队列</strong><br>作者从ADT（Abstract Data Type）出发，在前面实现的基于Array的序列基础上，实现了栈、队列、双向队列这三种数据结构。</p>
<p><strong>Ch7 链表</strong><br>该部分将前面已经实现的三种数据结构糅合在一起，在介绍了链表后，通过链表来实现上一章提到的集中数据结构。</p>
<p><strong>Ch8 树</strong><br>从树，再到二叉树，然后深入其中，借用Array序列和链表来实现树这个类。最后介绍了遍历树的简单算法。</p>
<p><strong>Ch9 优先队列</strong><br>同样，这部分先是介绍了优先队列后，分别用有序列表和无序列表实现了优先队列。然后由此引出了堆。再根据优先队列中的排序问题分别分析了选择排序、插入排序以及堆排序。</p>
<p><strong>Ch10 Map、哈希表以及跳表</strong><br>这部分内容的重点是介绍了Hash的思想。此外作者跳出Python下常用的字典类型，对Map进行了不同的分类并实现。</p>
<p><strong>Ch11 搜索树</strong><br>这部分内容主要围绕平衡树展开，介绍了AVL、红黑树等等。</p>
<p><strong>Ch12 排序与选择</strong><br>尽管前面已经提到了集中排序算法，这里作者补充了并排、快排以及桶排序等等算法并做了比较。</p>
<p><strong>Ch13 文本处理</strong><br>该部分主要是字符串查找的优化，重点分析了动态问题编程的思想。该部分还介绍了trie树（字典树）</p>
<p><strong>Ch14 图</strong><br>该部分虽然简短，但覆盖面广，包含了图的结构、图的遍历、最短路径以及最小生成树等等。需要参考其他书作为补充。</p>
<p><strong>Ch15 内存管理与B树</strong><br>介绍了Python中内存管理体系（内存分配，垃圾回收，缓存机制等等），并介绍了B树。</p>
<h2 id="Python-基础知识"><a href="#Python-基础知识" class="headerlink" title="Python 基础知识"></a>Python 基础知识</h2><h3 id="python是一门动态类、解释型的语言"><a href="#python是一门动态类、解释型的语言" class="headerlink" title="python是一门动态类、解释型的语言"></a>python是一门动态类、解释型的语言</h3><h3 id="python是面向对象的语言，函数也是对象"><a href="#python是面向对象的语言，函数也是对象" class="headerlink" title="python是面向对象的语言，函数也是对象"></a>python是面向对象的语言，函数也是对象</h3><h3 id="表达式、操作符、优先级"><a href="#表达式、操作符、优先级" class="headerlink" title="表达式、操作符、优先级"></a>表达式、操作符、优先级</h3><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h3 id="简单输入输出、File"><a href="#简单输入输出、File" class="headerlink" title="简单输入输出、File"></a>简单输入输出、File</h3><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h3 id="迭代器、生成器"><a href="#迭代器、生成器" class="headerlink" title="迭代器、生成器"></a>迭代器、生成器</h3><h3 id="语言优势–额外的便利：条件表达式、推导式语法、序列自动装拆箱"><a href="#语言优势–额外的便利：条件表达式、推导式语法、序列自动装拆箱" class="headerlink" title="语言优势–额外的便利：条件表达式、推导式语法、序列自动装拆箱"></a>语言优势–额外的便利：条件表达式、推导式语法、序列自动装拆箱</h3><p>simultaneous assignment 同时赋值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">x, y, z = <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span> </div><div class="line"><span class="comment"># 发生的行为是：等号右边先automatically packed 成一个typle,然后automatically unpacked 赋值给左边</span></div><div class="line">j, k = k, j</div><div class="line"><span class="comment"># 等效于：</span></div><div class="line">temp = j</div><div class="line">j = k</div><div class="line">k = temp</div></pre></td></tr></table></figure></p>
<h3 id="作用域和命名空间"><a href="#作用域和命名空间" class="headerlink" title="作用域和命名空间"></a>作用域和命名空间</h3><p>检查命名空间的标识符(字典的key):dir()<br>检查命名空间的标识符(full dict):vars()</p>
<h3 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h3><p>Modules are also first-class objects in Python<br>伪随机数<br>Mersenne twister 梅森旋转算法</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="目标，原则，模式"><a href="#目标，原则，模式" class="headerlink" title="目标，原则，模式"></a>目标，原则，模式</h3><p>目标<br>原则<br>设计模式</p>
<h3 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h3><p>设计<br>伪代码<br>编码风格、文档注释<br>测试</p>
<h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>操作符重载</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="命名空间和面向对象"><a href="#命名空间和面向对象" class="headerlink" title="命名空间和面向对象"></a>命名空间和面向对象</h3><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo + github page构建一个自用简易博客平台，使用markdown语法写作]]></title>
      <url>https://jamesxu9093.github.io/2016/12/08/markdown/</url>
      <content type="html"><![CDATA[<p>使用hexo + github page 构建一个自用博客平台，的一般步骤(以windows为例)：<br>1.安装git客户端<br>2.安装node.js<br>3.安装hexo，配置<br>4.下载主题，配置<br>5.学习markdown语法并进行写作<br><a id="more"></a></p>
<h1 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h1><h2 id="This-is-an-h2-tag"><a href="#This-is-an-h2-tag" class="headerlink" title="This is an h2 tag"></a>This is an h2 tag</h2><h2 id="This-is-an-h2-tag-1"><a href="#This-is-an-h2-tag-1" class="headerlink" title="This is an h2 tag"></a>This is an h2 tag</h2><h3 id="This-is-an-h3-tag"><a href="#This-is-an-h3-tag" class="headerlink" title="This is an h3 tag"></a>This is an h3 tag</h3><h3 id="This-is-an-h3-tag-1"><a href="#This-is-an-h3-tag-1" class="headerlink" title="This is an h3 tag"></a>This is an h3 tag</h3><h4 id="This-is-an-h4-tag"><a href="#This-is-an-h4-tag" class="headerlink" title="This is an h4 tag"></a>This is an h4 tag</h4><h1 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h1><p><em>This text will be italic</em><br><em>This will also be italic</em></p>
<p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p>
<p><em>You <strong>can</strong> combine them</em></p>
<h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><h2 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h2><ul>
<li>Item 1</li>
<li>Item 2<ul>
<li>Item 2a</li>
<li>Item 2b</li>
</ul>
</li>
</ul>
<h2 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h2><ol>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3<ul>
<li>Item 3a</li>
<li>Item 3b</li>
</ul>
</li>
</ol>
<h1 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h1><p><img src="/images/logo.png" alt="GitHub Logo"><br>Format: <img src="url" alt="Alt Text"><br><img src="/img/littleboy.png" alt="littleboy Logo"><br><img src="/blog-img/1209-1.png" alt=""></p>
<h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><p><a href="http://github.com" target="_blank" rel="external">http://github.com</a> - automatic!<br><a href="http://github.com" target="_blank" rel="external">GitHub</a></p>
<h1 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h1><p>As Kanye West said:</p>
<blockquote>
<p>We’re living the future so<br>the present is our past.</p>
</blockquote>
<h1 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h1><p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>
<h1 id="programming-language"><a href="#programming-language" class="headerlink" title="programming language"></a>programming language</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bar:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h1 id="Task-Lists"><a href="#Task-Lists" class="headerlink" title="Task Lists"></a>Task Lists</h1><ul>
<li>[x] @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</li>
<li>[x] list syntax required (any unordered or ordered list supported)</li>
<li>[x] this is a complete item</li>
<li>[ ] this is an incomplete item</li>
</ul>
<p>If you include a task list in the first comment of an Issue, you will get a handy progress indicator in your issue list. It also works in Pull Requests!</p>
<h1 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h1><table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content from cell 1</td>
<td>Content from cell 2</td>
</tr>
<tr>
<td>Content in the first column</td>
<td>Content in the second column</td>
</tr>
</tbody>
</table>
<font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#00ffff" size="72">color=#00ffff</font><br><font color="gray" size="72">color=gray</font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以当作块来看</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hello World</div><div class="line">date: 2015-12-03 00:00:00</div><div class="line">categories: samza</div><div class="line">tags: [samza,学习,hello world] </div><div class="line">toc: true</div><div class="line">---</div><div class="line">&lt;Excerpt in index | 首页摘要&gt; </div><div class="line">摘要内容...</div><div class="line">&lt;!-- more --&gt;</div><div class="line">&lt;The rest of contents | 余下全文&gt;</div><div class="line">余下的全文内容...</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门到精通]]></title>
      <url>https://jamesxu9093.github.io/2016/12/04/Python%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>一门语言的学习从来都不是一蹴而就的，需要对语言的方方面面进行学习，本文是自己打算要学的方向。包括如下方面：<br>1、Python语言基础<br>2、函数式编程与面向对象<br>3、数据结构和算法<br>4、爬虫：scrapy<br>5、web开发：flask，django，tornado<br>6、科学计算<br>7、机器学习<br><a id="more"></a></p>
]]></content>
    </entry>
    
  
  
</search>
